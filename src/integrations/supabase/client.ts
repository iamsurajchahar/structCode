// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use VITE_ prefix for environment variables in Vite projects
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Optional: Service role key (required for admin operations)
// For security, you should use this only on the server side, not in the client
const SUPABASE_SERVICE_ROLE_KEY = import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY || '';

// Check for required environment variables
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.warn("WARNING: Supabase credentials might be missing. Using fallback values.");
}

// Create Supabase client with optimized settings for better performance
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: true, // Temporarily enable debug for troubleshooting
    // Optimized session storage
    storage: {
      getItem: (key) => {
        try {
          const value = localStorage.getItem(key);
          console.log(`Auth storage get: ${key}`, value ? 'Found' : 'Not found');
          return value;
        } catch (error) {
          console.error('Error accessing localStorage:', error);
          return null;
        }
      },
      setItem: (key, value) => {
        try {
          console.log(`Auth storage set: ${key}`);
          localStorage.setItem(key, value);
        } catch (error) {
          console.error('Error setting localStorage:', error);
        }
      },
      removeItem: (key) => {
        try {
          console.log(`Auth storage remove: ${key}`);
          localStorage.removeItem(key);
        } catch (error) {
          console.error('Error removing localStorage item:', error);
        }
      }
    }
  },
  // Optimized global request settings
  global: {
    headers: {
      'X-Client-Info': 'DSA Hub Client'
    },
    // Optimized fetch with shorter timeout for auth operations
    fetch: (url, options) => {
      if (url.toString().includes('/auth/')) {
        console.log(`Auth API call: ${options?.method || 'GET'} ${url.toString()}`);
      }
      return fetch(url, {
        ...options,
        // Shorter timeout for faster failure detection
        signal: options?.signal || AbortSignal.timeout(10000), // Increased timeout for OAuth
      });
    }
  },
  // Optimized real-time settings
  realtime: {
    params: {
      eventsPerSecond: 5 // Reduced for better performance
    }
  }
});

// Create an admin client if service role key is available
// This should ONLY be used for admin operations
export const adminSupabase = SUPABASE_SERVICE_ROLE_KEY 
  ? createClient<Database>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })
  : null;

// Enhanced initial session check with OAuth handling
setTimeout(async () => {
  try {
    // Check for OAuth redirect parameters first
    const urlParams = new URLSearchParams(window.location.search);
    const hasAuthParams = urlParams.has('access_token') || 
                         urlParams.has('refresh_token') || 
                         urlParams.has('error') || 
                         urlParams.has('code') ||
                         urlParams.has('provider');
    
    if (hasAuthParams) {
      console.log('OAuth parameters detected on initial load');
      // Wait a bit for Supabase to process OAuth
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error("Error getting initial session:", error.message);
    } else if (data?.session) {
      console.log("Initial session found:", data.session.user.email);
      // Check for existence of user profile in background
      setTimeout(async () => {
        try {
          const { data: profileData, error: profileError } = await supabase
            .from('profiles')
            .select('id')
            .eq('id', data.session.user.id)
            .single();
            
          if (profileError && profileError.code !== 'PGRST116') {
            console.error("Error checking user profile:", profileError);
          }
        } catch (err) {
          console.error("Error checking initial profile:", err);
        }
      }, 100);
    } else {
      console.log("No initial session found");
    }
  } catch (err) {
    console.error("Error checking initial session:", err);
  }
}, 0);

// Add debugging helpers to window for easier troubleshooting (only in development)
if (typeof window !== 'undefined' && import.meta.env.DEV) {
  // @ts-ignore - Add to window for debugging
  window.supabaseClient = supabase;
  
  // @ts-ignore - Add helper functions
  window.supabaseDebug = {
    getSession: async () => {
      const { data, error } = await supabase.auth.getSession();
      console.log('Current session:', data?.session ? 'Found' : 'None', error || '');
      return { data, error };
    },
    checkUser: async (email: string) => {
      try {
        const { data, error } = await (supabase.rpc as any)('check_user_exists', { user_email: email });
        console.log('User check result:', data, error || '');
        return { data, error };
      } catch (e) {
        console.error('Error in checkUser:', e);
        return { error: e };
      }
    },
    confirmUser: async (email: string) => {
      try {
        const { data, error } = await (supabase.rpc as any)('manually_confirm_user', { user_email: email });
        console.log('Manual confirmation result:', error ? 'Failed' : 'Success', error || '');
        return { data, error };
      } catch (e) {
        console.error('Error in confirmUser:', e);
        return { error: e };
      }
    }
  };
}